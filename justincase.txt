// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TABLES

model Participant {
  participantId   Int       @id @default(autoincrement())
  alias           String    @unique
  memberOf        String  
  animals         Animal[]
  numberOfAwards  Int
  team            Team      @relation(fields: [memberOf], references: [name])
}

model Animal {
  animalId  Int             @id @default(autoincrement())
  name      String          @unique
  class     Classes
  species   String
  terrain   String
  rank      Ranks
  ownerId   Int
  owner     Participant    @relation(fields: [ownerId], references: [participantId], onDelete: Cascade) //cascade?
}

model Colosseum {
  colosseumId   Int     @id @default(autoincrement())
  colosseumName String  @unique
  country       String  @unique  //only one in each country maybe?
  city          String
  events        Event[]
}

model Team {
  teamId        Int             @id @default(autoincrement())
  name          String          @unique
  members       Participant[]
  continent     String
  country       String
  city          String          @unique
}

model Event {
  eventId         Int         @id @default(autoincrement())
  eventName       String
  location        String
  date            DateTime    @default(now())
  awards          Award[]
  tickets         Ticket[]
  colosseum       Colosseum   @relation(fields: [location], references: [colosseumName])
}

model Award {
  awardId     Int     @id @default(autoincrement())
  awardName   String  @unique
  type        String    //i.e. cash, trophy, etc
  quantity    Int  //num times this can be given in an event i.e. honorary 3 times, gold twice, silver twice, etc...
  eventId     Int
  event       Event   @relation(fields: [eventId], references: [eventId])
}

//Join table
model Ticket {
  ticketId    Int       @id @default(autoincrement())
  eventId     Int
  customerId  Int
  isVip       Boolean
  isPremium   Boolean
  event       Event     @relation(fields: [eventId], references: [eventId])
  customer    Customer  @relation(fields: [customerId], references: [customerId])
}

model Customer {
  customerId      Int       @id @default(autoincrement())
  customerAlias   String
  age             Int
  isRegular       Boolean //t? give discount
  tickets         Ticket[]
}

enum Ranks {
  OLYMPUS
  ELYSIUM
  VALHALLA
  IMMORTAL
  EMPIRE
  UNDYING
  TARTAROS
}

enum Classes {
  MAMMAL
  FISH
  AMPHIBIAN
  REPTILE
  BIRD
  INSECT
}